@page "/project/{projectId}"
@using Microsoft.Extensions.Configuration
@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models;
@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training;
@using Spectra.Model.Client.Data
@using Spectra.Model.Client.Models;
@using Newtonsoft.Json;
@using System.Text;

@inject IConfiguration Configuration
@inject IHttpClientFactory clientFactory


@inject CustomVisionService _customVisionService
@inject ModelApiService _modelApiService

@inject TooltipService tooltipService


@if (projectLoading)
{
    <i class="fas fa-spinner fa-spin" style="text-align: center;display: flex; justify-content: center;"></i>
}
else
{
    <div class="container-fluid p-0" style="width:100%;">
        <div class="row">
            @if (projectIterationLoading)
            {
                <div class="col-12">
                    <i class="fas fa-spinner fa-spin"></i>
                </div>
            }
            else
            {
                <div class="col-5">
                    <ol class="breadcrumb" style="background-color:#fff;">
                        <li class="breadcrumb-item"><a href="/">Spectra Catalogue</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@customVisionProject.Name</li>
                    </ol>
                    <div class="p-2">
                        <select style="width:25%;" @onchange="UpdateIteration" class="custom-select my-1 mr-sm-2" id="inlineFormCustomSelectPref">
                            @foreach (var iteration in projectIteration)
                            {
                                var iterationName = iteration.Name;
                                var replacement = iterationName.Replace("Iteration", "Version");

                                <option value="@iteration.Id">@replacement</option>
                            }
                        </select>
                        <h1 class="mb-0 mt-4" style="font-size:64px;">@customVisionProject.Name.ToUpper()</h1>
                        @foreach (var tag in projectTags)
                        {
                            <span class="badge badge-success mr-1 mt-1 mb-1" style="background-color:#074F30;">@tag.Name</span>
                        }
                        <p class="pt-5" style="font-size:24px;">@customVisionProject.Description</p>
                    </div>
                </div>
                <div class="col-7">
                    <div class="fill">
                        <img src="@customVisionProject.ThumbnailUri" alt="Card image cap">
                    </div>
                </div>

            }

        </div>
    </div>
    <div class="container-fluid p-0 mt-4">
        <div class="row">
            <!--<div class="col-3">
                <label>Probability Threshold</label>
                <div class="slidecontainer">
                    <input @onchange="UpdatePerformance" type="range" min="1" max="100" class="slider" id="myRange">
                </div>
                <p>@probabilityThreshold</p>
            </div>-->
            <div class="col-5">
                <h1 class="pt-5" style="font-size:64px;">PERFORMANCE METRICS</h1>
            </div>
            @if (updatingPerformance)
            {
                <div class="col-7"><i class="fas fa-spinner fa-spin" style="text-align: center;display: flex; justify-content: center;"></i></div> }
            else
            {
                var setPrecision = $"{Math.Round(_iterationPerformance[currentIteration.Id].Precision, 2) * 100}%";
                var setRecall = $"{Math.Round(_iterationPerformance[currentIteration.Id].Recall, 2) * 100}%";
                var setmAP = $"{Math.Round((double)_iterationPerformance[currentIteration.Id].AveragePrecision, 2) * 100}%";
                <AuthorizeView>
                    <Authorized>
                        <p>Finished training on <strong>@DateTime.Parse(currentIteration.TrainedAt.ToString()).ToLocalTime()</strong></p>
                        <p>Iteration Id: <strong>@currentIteration.Id</strong></p>
                    </Authorized>
                </AuthorizeView>
                <div class="col">
                    <p class="text-center m-0 pt-5">
                        <span class="align-top">
                            Precision
                        </span>
                        <RadzenIcon Icon="info" MouseLeave="@(args => HideTooltip(args) )" MouseEnter="@(args => ShowPrecisionTooltip(args,
                                                                            new TooltipOptions(){ Style = "background-color:#B2E6B2; color:#414141;", Position = TooltipPosition.Top }) )" />
                    </p>
                    <RadzenChart ColorScheme="@colorSchemePrecision">
                        <RadzenDonutSeries Data="@donutChart["Precision"]" ValueProperty="Value">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>@Math.Round((_iterationPerformance[currentIteration.Id].Precision * 100), 1)%</div>
                                </div>
                            </TitleTemplate>
                        </RadzenDonutSeries>
                        <RadzenLegend Visible="false" />
                        <RadzenChartTooltipOptions Visible="false" />
                        <RadzenValueAxis>
                            <RadzenAxisTitle Text="Value" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
                <div class="col">
                    <p class="text-center m-0 pt-5">
                        <span class="align-top">
                            Recall
                        </span>
                        <RadzenIcon Icon="info" MouseLeave="@(args => HideTooltip(args) )" MouseEnter="@(args => ShowRecallTooltip(args,
                                                                            new TooltipOptions(){ Style = "background-color:#B2E6B2; color:#414141;", Position = TooltipPosition.Top }) )" />
                    </p>
                    <RadzenChart ColorScheme="@colorSchemeRecall">
                        <RadzenDonutSeries Data="@donutChart["Recall"]" ValueProperty="Value">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>@Math.Round((_iterationPerformance[currentIteration.Id].Recall * 100), 1)%</div>
                                </div>
                            </TitleTemplate>
                        </RadzenDonutSeries>
                        <RadzenLegend Visible="false" />
                        <RadzenChartTooltipOptions Visible="false" />
                        <RadzenValueAxis>
                            <RadzenAxisTitle Text="Value" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
                <div class="col">
                    <p class="text-center m-0 pt-5">
                        <span class="align-top">
                            mAP
                        </span>
                        <RadzenIcon Icon="info" MouseLeave="@(args => HideTooltip(args) )" MouseEnter="@(args => ShowAveragePrecisionTooltip(args,
                                                                            new TooltipOptions(){ Style = "background-color:#B2E6B2; color:#414141;", Position = TooltipPosition.Left }) )" />
                    </p>
                    <RadzenChart ColorScheme="@colorSchemeAveragePrecision">
                        <RadzenDonutSeries Data="@donutChart["mAP"]" ValueProperty="Value">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>@Math.Round((double)(_iterationPerformance[currentIteration.Id].AveragePrecision * 100), 1)%</div>
                                </div>
                            </TitleTemplate>
                        </RadzenDonutSeries>
                        <RadzenLegend Visible="false" />
                        <RadzenChartTooltipOptions Visible="false" />
                        <RadzenValueAxis>
                            <RadzenAxisTitle Text="Value" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
                <AuthorizeView>
                    <Authorized>
                        @if (activateExporting)
                        {
                            <div class="btn-toolbar pt-5" role="toolbar" aria-label="Toolbar with button groups">
                                <div class="btn-group mr-2" role="group" aria-label="First group">
                                    <button disabled="@exportingProject" @onclick="() => GetProjectWithImagesAndRegions(Guid.Parse(ProjectId))" class="btn btn-primary">Export Data</button>
                                </div>
                                <div class="btn-group mr-2" role="group" aria-label="Second group">
                                    <select @bind="exportType" class="custom-select" id="inputGroupSelect03">
                                        <option value="customvision" selected>Custom Vision</option>
                                        <option value="pascal">Pascal</option>
                                        <option value="yolo">Yolo</option>
                                    </select>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p>Select an Iteration to export.</p>
                        }

                        @if (exportingProject)
                        {
                            <div class="alert alert-info mt-2" role="alert" style="text-align:center;">
                                <i class="fas fa-spinner fa-spin"></i>
                                <span>@exportingProjectStatus</span>
                            </div>
                        }
                        @if (exportedProject != null)
                        {
                            <div class="alert alert-info mt-2" role="alert">
                                Export Completed, <a href="@exportedProject.ZippedProject" download="@exportedProject.ProjectId" target="_top">
                                    download
                                </a> @exportedProject.ProjectId is ready!
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            }
        </div>

    </div>

    <div class="container-fluid p-0 mt-4">
        <h1 class="pt-5" style="font-size:64px;">DEMONSTRATION</h1>
        @if (!loadDemoPredictions)
        {
            <div class="row pb-4">
                <div class="col-4">
                    <button disabled="@loadDemoPredictions" @onclick="() => PredictImage()" class="btn btn-success" style="background-color:#074F30;">Predict</button>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-6">
                <h4>Input</h4>
                @foreach (var url in customVisionProject.DemoUrls)
                {
                    <div class="card" style="width: 32rem;">
                        <img class="card-img-top" src="@url" alt="Card image cap">
                    </div>
                }
            </div>
            <div class="col-6">
                @if (predictingImages)
                {
                    <i class="fas fa-spinner fa-spin"></i>

                }
                else
                {
                    <h4>Result</h4>
                    @foreach (var response in predictionList)
                    {
                        <p>@response</p>
                    }
                }
            </div>
        </div>
    </div>


}

@code {
    class DataItem
    {
        public string MeasurementType { get; set; }
        public double Value { get; set; }
    }

    private IDictionary<string, DataItem[]> donutChart = new Dictionary<string, DataItem[]>();

    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    ColorScheme colorSchemePrecision = ColorScheme.Monochrome;
    ColorScheme colorSchemeRecall = ColorScheme.Divergent;
    ColorScheme colorSchemeAveragePrecision = ColorScheme.Palette;

    [Parameter]
    public string ProjectId { get; set; }

    private bool projectLoading = true;
    private bool projectIterationLoading = true;

    // Objects
    private SpectraProject customVisionProject;
    private IList<Iteration> projectIteration = new List<Iteration>();
    private IList<Tag> projectTags = new List<Tag>();
    private IDictionary<Guid, IterationPerformance> _iterationPerformance = new Dictionary<Guid, IterationPerformance>();
    private IDictionary<Guid, int?> _iterationTaggedImages = new Dictionary<Guid, int?>();

    private double probabilityThreshold = .6;
    Spectra.Model.Client.Models.Export exportedProject;

    // Stats
    private int? taggedImageCount;
    private int? untaggedImageCount;
    private bool updatingPerformance = false;
    private Iteration currentIteration;

    // Custom Vision Settings
    private string TrainingKey = "c750b0db2467468c87352d069d4a38e2";
    private string Endpoint = "https://spectra-video-analytics.cognitiveservices.azure.com/";
    private CustomVisionTrainingClient trainingApi;

    // Exporting
    private bool exportingProject;
    private string exportingProjectStatus;
    private string exportType = "customvision";
    private Guid selectedIteration;
    private bool activateExporting = false;

    // Predictions
    private bool loadDemoPredictions = false;
    private bool predictingImages = false;
    private List<string> predictionList = new List<string>();


    // Tooltips
    void ShowPrecisionTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    @<div>
        Precision will tell you: <br> if a tag is predicted by the <br> model, how likely is that to be right?
    </div>, options);

    void ShowRecallTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    @<div>
        Recall will tell you: <br> out of the tags which should <br> be predicted correctly, what percentage <br> did the model correctly find?
    </div>, options);

    void ShowAveragePrecisionTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    @<div>
        This number will tell you: <br> the overall object detector performance <br> across all the tags.
</div>, options);

void HideTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Close();

protected async Task ConnectToCustomVision()
{


  try
  {
      projectLoading = true;
      //customVisionProject = await trainingApi.GetProjectAsync(Guid.Parse(ProjectId));
      string jsonString = await _modelApiService.GetProject(ProjectId);
      customVisionProject = JsonConvert.DeserializeObject<SpectraProject>
(jsonString);
      projectLoading = false;


      projectIterationLoading = true;
      projectIteration = await trainingApi.GetIterationsAsync(customVisionProject.Id);
      taggedImageCount = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id);
      untaggedImageCount = await trainingApi.GetUntaggedImageCountAsync(customVisionProject.Id);
      projectTags = await trainingApi.GetTagsAsync(customVisionProject.Id);
      projectIterationLoading = false;


      currentIteration = projectIteration.OrderByDescending(x => x.TrainedAt).First();
      _iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
      selectedIteration = currentIteration.Id;

      var recallDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Recall * 100) - 100);
      donutChart["Recall"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Recall",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = recallDifference
    }
    };

      var precisionDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Precision * 100) - 100);
      donutChart["Precision"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Precision",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = precisionDifference
    }
    };

      var mAPDifference = Math.Abs((double)(_iterationPerformance[currentIteration.Id].AveragePrecision * 100) - 100);
      donutChart["mAP"] = new DataItem[] {
    new DataItem {
    MeasurementType = "mAP",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = mAPDifference
    }
    };


      if (!activateExporting)
          activateExporting = true;
  }
  catch
  {

  }
}

protected async Task UpdateIteration(ChangeEventArgs e)
{
  updatingPerformance = true;

  selectedIteration = Guid.Parse(e.Value.ToString());
  currentIteration = projectIteration.Where(n => n.Id == selectedIteration).FirstOrDefault();
  _iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
  _iterationTaggedImages[currentIteration.Id] = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id, iterationId: currentIteration.Id);

  updatingPerformance = false;
}


protected async Task UpdatePerformance(ChangeEventArgs e)
{
  updatingPerformance = true;
  probabilityThreshold = Convert.ToDouble(e.Value.ToString()) / 100;

  _iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
  _iterationTaggedImages[currentIteration.Id] = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id, iterationId: currentIteration.Id);


  var recallDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Recall * 100) - 100);
  donutChart["Recall"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Recall",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = recallDifference
    }
    };

  var precisionDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Precision * 100) - 100);
  donutChart["Precision"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Precision",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = precisionDifference
    }
    };

  var mAPDifference = Math.Abs((double)(_iterationPerformance[currentIteration.Id].AveragePrecision * 100) - 100);
  donutChart["mAP"] = new DataItem[] {
    new DataItem {
    MeasurementType = "mAP",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = mAPDifference
    }
    };


  updatingPerformance = false;
}

protected override async Task OnInitializedAsync()
{
  await Task.Delay(1);
  trainingApi = _customVisionService.AuthenticateTraining(Endpoint, TrainingKey);
  ProjectId = ProjectId ?? null;
  await ConnectToCustomVision();
  //await PredictImage();
  //Task.Run(() => PredictImage());
}

protected async Task<List<string>> PredictImage()
{
  loadDemoPredictions = true;
  predictingImages = true;
  foreach (var url in customVisionProject.DemoUrls)
  {
      var result = await _modelApiService.DemoPredictFromUrl(ProjectId, url, "People-Tracking-Demo");
      predictionList.Add(result);
  }
  predictingImages = false;
  return predictionList;
}

protected void SetIterationId(Guid IterationId)
{
  if (!activateExporting)
      activateExporting = true;
  selectedIteration = IterationId;
}

async Task GetProjectWithImagesAndRegions(Guid projectId)
{
  exportingProject = true;
  exportedProject = null;
  exportingProjectStatus = "Retrieving project.";
  var json_dict = new Dictionary<string, string>
{
            { "Endpoint", Endpoint },
            { "TrainingKey", TrainingKey }
        };

  var url = $"https://spectra-model-api.azurewebsites.net/api/project/{projectId}/images/{exportType}/{selectedIteration}";
  var json = JsonConvert.SerializeObject(json_dict);

  var request = new HttpRequestMessage
  {
      Method = HttpMethod.Get,
      RequestUri = new Uri(url),
      Content = new StringContent(json, Encoding.UTF8, "application/json"),
  };

  exportingProjectStatus = "Exporting annotations. This might take a while.";

  var client = clientFactory.CreateClient();
  client.Timeout = TimeSpan.FromMinutes(20);

  var response = await client.SendAsync(request);

  //var response = await client.SendAsync(request).ConfigureAwait(false);
  response.EnsureSuccessStatusCode();

  var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

  exportedProject = JsonConvert.DeserializeObject<Spectra.Model.Client.Models.Export>(responseBody);

  exportingProject = false;
}
}
