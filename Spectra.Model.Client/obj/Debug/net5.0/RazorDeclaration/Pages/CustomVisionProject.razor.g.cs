// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Spectra.Model.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Spectra.Model.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Spectra.Model.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Spectra.Model.Client.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Spectra.Model.Client.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/project/{projectId}")]
    public partial class CustomVisionProject : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 288 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
       
    class DataItem
    {
        public string MeasurementType { get; set; }
        public double Value { get; set; }
    }

    private IDictionary<string, DataItem[]> donutChart = new Dictionary<string, DataItem[]>();

    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    ColorScheme colorSchemePrecision = ColorScheme.Monochrome;
    ColorScheme colorSchemeRecall = ColorScheme.Divergent;
    ColorScheme colorSchemeAveragePrecision = ColorScheme.Palette;

    [Parameter]
    public string ProjectId { get; set; }

    private bool projectLoading = true;
    private bool projectIterationLoading = true;

    // Objects
    private SpectraProject customVisionProject;
    private IList<Iteration> projectIteration = new List<Iteration>();
    private IList<Tag> projectTags = new List<Tag>();
    private IDictionary<Guid, IterationPerformance> _iterationPerformance = new Dictionary<Guid, IterationPerformance>();
    private IDictionary<Guid, int?> _iterationTaggedImages = new Dictionary<Guid, int?>();

    private double probabilityThreshold = .6;
    Spectra.Model.Client.Models.Export exportedProject;

    // Stats
    private int? taggedImageCount;
    private int? untaggedImageCount;
    private bool updatingPerformance = false;
    private Iteration currentIteration;

    // Custom Vision Settings
    private string TrainingKey = "c750b0db2467468c87352d069d4a38e2";
    private string Endpoint = "https://spectra-video-analytics.cognitiveservices.azure.com/";
    private CustomVisionTrainingClient trainingApi;

    // Exporting
    private bool exportingProject;
    private string exportingProjectStatus;
    private string exportType = "customvision";
    private Guid selectedIteration;
    private bool activateExporting = false;

    // Predictions
    private bool loadDemoPredictions = false;
    private bool predictingImages = false;
    private List<string> predictionList = new List<string>();


    // Tooltips
    void ShowPrecisionTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.AddMarkupContent(0, "<div b-3jf46kur98>\r\n        Precision will tell you: <br b-3jf46kur98> if a tag is predicted by the <br b-3jf46kur98> model, how likely is that to be right?\r\n    </div>");
        }
#nullable restore
#line 346 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
          , options);

void ShowRecallTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.AddMarkupContent(1, "<div b-3jf46kur98>\r\n    Recall will tell you: <br b-3jf46kur98> out of the tags which should <br b-3jf46kur98> be predicted correctly, what percentage <br b-3jf46kur98> did the model correctly find?\r\n</div>");
        }
#nullable restore
#line 351 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
      , options);

void ShowAveragePrecisionTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.AddMarkupContent(2, "<div b-3jf46kur98>\r\n    This number will tell you: <br b-3jf46kur98> the overall object detector performance <br b-3jf46kur98> across all the tags.\r\n</div>");
        }
#nullable restore
#line 356 "C:\Users\Alec\source\spectra\Spectra.Model.Client\Spectra.Model.Client\Pages\CustomVisionProject.razor"
      , options);

void HideTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Close();

protected async Task ConnectToCustomVision()
{


try
{
projectLoading = true;
//customVisionProject = await trainingApi.GetProjectAsync(Guid.Parse(ProjectId));
string jsonString = await _modelApiService.GetProject(ProjectId);
customVisionProject = JsonConvert.DeserializeObject<SpectraProject>
(jsonString);
projectLoading = false;


projectIterationLoading = true;
projectIteration = await trainingApi.GetIterationsAsync(customVisionProject.Id);
taggedImageCount = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id);
untaggedImageCount = await trainingApi.GetUntaggedImageCountAsync(customVisionProject.Id);
projectTags = await trainingApi.GetTagsAsync(customVisionProject.Id);
projectIterationLoading = false;


currentIteration = projectIteration.OrderByDescending(x => x.TrainedAt).First();
_iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
selectedIteration = currentIteration.Id;

var recallDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Recall * 100) - 100);
donutChart["Recall"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Recall",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = recallDifference
    }
    };

var precisionDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Precision * 100) - 100);
donutChart["Precision"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Precision",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = precisionDifference
    }
    };

var mAPDifference = Math.Abs((double)(_iterationPerformance[currentIteration.Id].AveragePrecision * 100) - 100);
donutChart["mAP"] = new DataItem[] {
    new DataItem {
    MeasurementType = "mAP",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = mAPDifference
    }
    };


if (!activateExporting)
  activateExporting = true;
}
catch
{

}
}

protected async Task UpdateIteration(ChangeEventArgs e)
{
updatingPerformance = true;

selectedIteration = Guid.Parse(e.Value.ToString());
currentIteration = projectIteration.Where(n => n.Id == selectedIteration).FirstOrDefault();
_iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
_iterationTaggedImages[currentIteration.Id] = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id, iterationId: currentIteration.Id);
taggedImageCount = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id, selectedIteration);

updatingPerformance = false;
}


protected async Task UpdatePerformance(ChangeEventArgs e)
{
updatingPerformance = true;
probabilityThreshold = Convert.ToDouble(e.Value.ToString()) / 100;

_iterationPerformance[currentIteration.Id] = await trainingApi.GetIterationPerformanceAsync(customVisionProject.Id, currentIteration.Id, threshold: probabilityThreshold);
_iterationTaggedImages[currentIteration.Id] = await trainingApi.GetTaggedImageCountAsync(customVisionProject.Id, iterationId: currentIteration.Id);


var recallDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Recall * 100) - 100);
donutChart["Recall"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Recall",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = recallDifference
    }
    };

var precisionDifference = Math.Abs((_iterationPerformance[currentIteration.Id].Precision * 100) - 100);
donutChart["Precision"] = new DataItem[] {
    new DataItem {
    MeasurementType = "Precision",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = precisionDifference
    }
    };

var mAPDifference = Math.Abs((double)(_iterationPerformance[currentIteration.Id].AveragePrecision * 100) - 100);
donutChart["mAP"] = new DataItem[] {
    new DataItem {
    MeasurementType = "mAP",
    Value = _iterationPerformance[currentIteration.Id].Recall*100
    },
    new DataItem
    {
    MeasurementType = "Difference",
    Value = mAPDifference
    }
    };


updatingPerformance = false;
}

protected override async Task OnInitializedAsync()
{
await Task.Delay(1);
trainingApi = _customVisionService.AuthenticateTraining(Endpoint, TrainingKey);
ProjectId = ProjectId ?? null;
await ConnectToCustomVision();
//await PredictImage();
//Task.Run(() => PredictImage());
}

protected async Task<List<string>> PredictImage()
{
loadDemoPredictions = true;
predictingImages = true;
foreach (var url in customVisionProject.DemoUrls)
{
var result = await _modelApiService.DemoPredictFromUrl(ProjectId, url, "People-Tracking-Demo");
predictionList.Add(result.Replace('"', ' ').Trim());
}
predictingImages = false;
return predictionList;
}

protected void SetIterationId(Guid IterationId)
{
if (!activateExporting)
activateExporting = true;
selectedIteration = IterationId;
}

async Task GetProjectWithImagesAndRegions(Guid projectId)
{
exportingProject = true;
exportedProject = null;
exportingProjectStatus = "Exporting annotations. This might take a while.";
var result = await _modelApiService.GetDataExport(ProjectId, exportType, currentIteration.Id.ToString());

exportedProject = result;
exportingProject = false;
}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TooltipService tooltipService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModelApiService _modelApiService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomVisionService _customVisionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpClientFactory clientFactory { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration Configuration { get; set; }
    }
}
#pragma warning restore 1591
